<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: OSX | My Blog]]></title>
  <link href="http://ennamika.github.io/blog/tags/osx/atom.xml" rel="self"/>
  <link href="http://ennamika.github.io/"/>
  <updated>2015-06-02T23:31:53+09:00</updated>
  <id>http://ennamika.github.io/</id>
  <author>
    <name><![CDATA[Mika Yamamoto]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[絶賛更新中]iOS,OSX向けの新しい言語「swift」について]]></title>
    <link href="http://ennamika.github.io/blog/2014/06/03/swift/"/>
    <updated>2014-06-03T10:34:05+09:00</updated>
    <id>http://ennamika.github.io/blog/2014/06/03/swift</id>
    <content type="html"><![CDATA[<p>Appleから新しいiOS,OS X向け言語が発表されたみたいです・ω・</p>

<p><a href="https://developer.apple.com/swift/">Swift</a></p>

<p>なんて速そうなお名前。
さっそくiBook StoreにSwiftに関する電子書籍がアップされていたので読んでみました。</p>

<div class="pochireba" style="text-align:left;font-size:small;padding:20px 0;/zoom: 1;overflow: hidden;"><a href="https://itunes.apple.com/jp/book/swift-programming-language/id881256329?mt=11&uo=4&at=10l8vp" target="_blank" ><img src="http://a1.mzstatic.com/us/r30/Publication4/v4/a9/9d/d1/a99dd1d5-39b9-71ce-7500-2eb3e8d56990/cover.60x60-50.jpg" alt="The Swift Programming Language" width="60" height="60" style="float:left;margin:0 15px 0 0;width:60px;height:60px;" class="pochi_img" ></a><div class="pochi_info" style="text-align:left;/zoom: 1;overflow: hidden;"><div class="pochi_name"><a href="https://itunes.apple.com/jp/book/swift-programming-language/id881256329?mt=11&uo=4&at=10l8vp" target="_blank" >The Swift Programming Language</a></div><div class="pochi_price" style="display:inline;">無料</div><div class="pochi_time" style="font-size:x-small;display:inline;">(2014.06.03時点)</div>&nbsp;<a href="https://itunes.apple.com/jp/book/swift-programming-language/id881256329?mt=11&uo=4&at=10l8vp" style="width:60px;color:#ffffff;background:#000000;font-size:8px;font-weight:bold;text-align:center;display:inline;text-decoration:none;border:0px;padding:2px;border-radius:5px;white-space:nowrap;" target="_blank" >App Store</a><div class="pochi_seller"><a href="https://itunes.apple.com/jp/artist/apple-inc./id405307759?mt=11&uo=4&at=10l8vp" target="_blank" >Apple Inc.</a></div><div class="pochi_post" style="font-size:x-small;">posted with <a href="http://pochireba.com" rel="nofollow" target="_blank">ポチレバ</a></div></div><div class="pochireba-footer" style="clear: left"></div></div>


<p>※合間にまとめてるためまったり更新です＞＜</p>

<!-- more -->


<h2>変数と定数</h2>

<p>定数は<code>let</code>で宣言、変数は<code>var</code>で宣言します。</p>

<pre><code>let maxNum = 50
var number = 0
</code></pre>

<p>上記で、<code>maxNum</code>という<code>50</code>が入った定数が宣言。<br/>
<code>number</code>という変数を<code>0</code>で初期化という形になります。</p>

<p>なるほど。<br/>
<code>let</code>で宣言した場合は定数という扱いなので、内容が変更される予定がなければ基本的には<code>let</code>で宣言するのが望ましいです。</p>

<h3>型推論</h3>

<p>Swiftには型推論という機能があるようで、代入する値によって型を推論してくれるようです。</p>

<pre><code>let number = 4
let name = 'Mika'
var data = 5.4
</code></pre>

<p>これで、<br/>
<code>number</code>は<code>Integer</code>型の定数<br/>
<code>name</code>は<code>String</code>型の定数<br/>
<code>data</code>は<code>Double</code>型の変数<br/>
という感じの宣言になります。</p>

<p>コンマで区切れば複数宣言も可能です。</p>

<pre><code>var x = 0.0, y = 0.0, z = 0.0
</code></pre>

<h3>型指定</h3>

<p>もちろん型を指定して宣言することもできます。</p>

<pre><code>var message: String
</code></pre>

<p>この<code>:</code>は<code>…の型は…</code>といった感じの意味になっていて、<code>:</code>の後ろに指定したい型を書きます。<br/>
宣言時に型を指定した時はその他の型を入れることはできません。
<code>
message = 'MESSAGE'
</code></p>

<p>基本的には型指定を使わなくても、宣言時に型推論を頼って初期値を入れてしまえば、問題ありません。</p>

<h3>定数・変数の名前に利用できるもの</h3>

<p>Unicode文字に含まれている文字であればどんなものでも宣言として使えます。</p>

<pre><code>let π = 3.14159
let あいさつ = "こんにちは！"
</code></pre>

<p>iPhoneで利用されている絵文字なんてのも定数・変数として利用でちゃいます（このブログではちょっと表示できませんが）。</p>

<h2>定数・変数の出力</h2>

<p>出力については<code>println</code>関数を使うことで簡単に出力できます。</p>
]]></content>
  </entry>
  
</feed>
